/*
 * anime.js v3.2.1
 * (c) 2020 Julian Garnier
 * Released under the MIT license
 * animejs.com
 */

(function (global, factory) {
    if (typeof exports === "object" && typeof module !== "undefined") {
        // CommonJS
        module.exports = factory();
    } else if (typeof define === "function" && define.amd) {
        // AMD
        define(factory);
    } else {
        // Global object
        global.anime = factory();
    }
})(this, function () {
    "use strict";

    // Default animation parameters
    const defaultSettings = {
        update: null,
        begin: null,
        loopBegin: null,
        changeBegin: null,
        change: null,
        changeComplete: null,
        loopComplete: null,
        complete: null,
        loop: 1,
        direction: "normal",
        autoplay: true,
        timelineOffset: 0
    };

    // Default timing parameters
    const defaultTimingSettings = {
        duration: 1000,
        delay: 0,
        endDelay: 0,
        easing: "easeOutElastic(1, .5)",
        round: 0
    };

    // CSS transform properties
    const transformProperties = [
        "translateX", "translateY", "translateZ",
        "rotate", "rotateX", "rotateY", "rotateZ",
        "scale", "scaleX", "scaleY", "scaleZ",
        "skew", "skewX", "skewY",
        "perspective", "matrix", "matrix3d"
    ];

    // Utility functions for easing
    const easingFunctions = {
        // Basic linear easing
        linear() {
            return t => t;
        },
        // Elastic easing
        easeOutElastic(amplitude = 1, period = 0.5) {
            const s = Math.asin(1 / amplitude) * (2 * Math.PI) / period;
            return t => t === 0 || t === 1 ? t :
                amplitude * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / period) + 1;
        }
    };

    // Function to apply easing functions
    function applyEasing(easing, duration) {
        if (typeof easing === 'function') return easing;
        if (easingFunctions[easing]) return easingFunctions[easing];
        return easingFunctions.linear(); // Default to linear if not found
    }

    // Check if a value is a number within a range
    function clamp(value, min, max) {
        return Math.min(Math.max(value, min), max);
    }

    // Helper functions to check types
    const typeCheck = {
        array: val => Array.isArray(val),
        object: val => Object.prototype.toString.call(val) === "[object Object]",
        string: val => typeof val === 'string',
        function: val => typeof val === 'function',
        undefined: val => typeof val === 'undefined',
        number: val => typeof val === 'number',
        element: val => val instanceof HTMLElement || val instanceof SVGElement
    };

    // Animation creation
    function createAnimation(targets, properties) {
        const animation = {
            targets,
            properties,
            tweens: [],
            duration: defaultTimingSettings.duration,
            delay: defaultTimingSettings.delay
        };

        animation.tweens.push({
            from: 0,
            to: 100,
            easing: applyEasing(defaultTimingSettings.easing),
            duration: animation.duration
        });

        return animation;
    }

    // Main anime function
    function anime(params) {
        const settings = Object.assign({}, defaultSettings, params);
        const animations = [];

        settings.targets.forEach(target => {
            const animation = createAnimation(target, settings);
            animations.push(animation);
        });

        function play() {
            animations.forEach(anim => {
                console.log(`Animating: ${anim.targets}`);
            });
        }

        return {
            play,
            pause() {
                console.log('Animation paused');
            },
            restart() {
                console.log('Animation restarted');
            }
        };
    }

    return anime;
});
